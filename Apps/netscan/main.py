import time
import subprocess
import speedtest
from scapy.all import ARP, Ether, srp

def scan_network(ip_range):
    try:
        ans, _ = srp(Ether(dst="ff:ff:ff:ff:ff:ff")/ARP(pdst=ip_range), timeout=2, verbose=False)
        devices = [({"ip": arp.psrc, "mac": arp.hwsrc}) for _, arp in ans]
        return devices
    except Exception as e:
        print(f"Error scanning network: {str(e)}")
        return []

def get_gateway_ip():
    try:
        result = subprocess.run(["ip", "route"], capture_output=True, text=True)
        lines = result.stdout.split("\n")
        for line in lines:
            if "default via" in line:
                parts = line.split()
                gateway_ip = parts[2]
                return gateway_ip
    except Exception as e:
        print(f"Error getting gateway IP: {str(e)}")
        return None

def measure_speed(ip):
    try:
        st = speedtest.Speedtest()
        st.get_best_server()
        download_speed = st.download()
        upload_speed = st.upload()
        return download_speed, upload_speed
    except Exception as e:
        print(f"Error measuring speed for {ip}: {str(e)}")
        return None, None

def main():
    ip_range = "192.168.1.0/24"  # Cambia esto a tu rango de red
    while True:
        gateway_ip = get_gateway_ip()
        if gateway_ip:
            devices = scan_network(ip_range)
            for device in devices:
                ip = device["ip"]
                mac = device["mac"]
                download_speed, upload_speed = measure_speed(ip)
                if download_speed is not None and upload_speed is not None:
                    print(f"Device: {ip} ({mac}), Gateway: {gateway_ip}")
                    print(f"Download Speed: {download_speed / 1024 / 1024:.2f} Mbps")
                    print(f"Upload Speed: {upload_speed / 1024 / 1024:.2f} Mbps")
                    print("-" * 30)
        time.sleep(5)

if __name__ == "__main__":
    main()
